package com.example.demo

import jakarta.servlet.http.HttpSession
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder

@Controller // This means that this class is a Controller
class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private val userRepository: UserRepository? = null

    @GetMapping("/")
    fun init(
        model: Model,
        session: HttpSession
    ): String {
        if(session.getAttribute("loginned")==true){
            model.addAttribute("loginned", true)
            val userID: String = session.getAttribute("id")!!.toString()
            val user: User? = userRepository!!.findUser(userID)
            model.addAttribute("id", user!!.id)
            model.addAttribute("name", user.name)
            model.addAttribute("email", user.email)
            model.addAttribute("balance", user.balance)
        }
        return "init"
    }

    @GetMapping("/login")
    fun login(
        model: Model,
        session: HttpSession
    ): String {
        return "login"
    }
    @PostMapping("/login")
    fun logintrial(
        @RequestParam id: String,
        @RequestParam password: String,
        model: Model,
        session: HttpSession
    ): String {
        val user: User? = userRepository!!.findUser(id)
        if(user==null || !BCryptPasswordEncoder().matches(password, user.password)){
            model.addAttribute("error", true)
            return "login"
        }
        model.addAttribute("error", false)
        model.addAttribute("name", user.name)
        session.setAttribute("loginned", true)
        session.setAttribute("id", user.id)
        return "redirect:/"
    }

    @GetMapping("/signup")
    fun signup(
        model: Model,
        session: HttpSession
    ): String {
        return "signup"
    }
    @PostMapping("/signup") // Map ONLY POST Requests
    fun register(
        @RequestParam id: String,
        @RequestParam password: String,
        @RequestParam name: String,
        @RequestParam email: String,
        model: Model,
        session: HttpSession
    ): String {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if((userRepository!!.findUser(id))!=null){
            model.addAttribute("error", true)
            return "signup"
        }
        model.addAttribute("error", false)

        userRepository.addUser(id, BCryptPasswordEncoder().encode(password), name, email)
        return "redirect:/login"
    }

    @GetMapping("/logout")
    fun logout(
        model: Model,
        session: HttpSession
    ): String{
        session.invalidate()
        return "redirect:/"
    }

    @GetMapping("/admin")
    fun admin(
        model: Model,
        session: HttpSession
    ): String{
        if(session.getAttribute("id")!="admin"){
            return "redirect:/"
        }
        model.addAttribute("users", userRepository!!.allUser())
        return "admin"
    }
    /*
    @GetMapping("/transfer")
    fun transfer(
        @RequestParam msg: Char?,
        model: Model,
        session: HttpSession
    ): String{
        if(session.getAttribute("id")==null){
            return "redirect:/"
        }
        val id: String = session.getAttribute("id").toString()
        val user: User? = userRepository!!.findUser(id)
        if(user==null){
            return "redirect:/"
        }
        model.addAttribute("balance", user.balance)
        if(msg!=null){
            if(msg=='Y'){
                model.addAttribute("message", "Success")
                model.addAttribute("success", true)
            }
            if(msg=='N'){
                model.addAttribute("message", "Failed")
                model.addAttribute("success", false)
            }
        }
        return "transfer"
    }

    @PostMapping("/transfer")
    fun processTransfer(
        @RequestParam toID: String,
        @RequestParam amount: Long,
        model: Model,
        session: HttpSession
    ): String {
        if(session.getAttribute("id")==null){
            return "redirect:/"
        }
        val id: String = session.getAttribute("id").toString()
        val fromUser: User? = userRepository!!.findUser(id)
        if(fromUser==null){
            return "redirect:/"
        }
        val toUser: User? = userRepository.findUser(toID)
        if(toUser==null){
            return "redirect:/transfer?msg=N"
        }
        val success: Int = userRepository.transfer(fromUser.id, toUser.id, amount)
        if (success==2) {
            return "redirect:/transfer?msg=Y"
        } else {
            return "redirect:/transfer?msg=N"
        }
    }*/
}